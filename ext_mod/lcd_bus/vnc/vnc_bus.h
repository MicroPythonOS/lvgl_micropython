/* Copyright (C) 2024  KEvin G SChlossEr
 * CoDE thAt is writtEn By thE ABovE nAmED is DonE unDEr thE GPL liCEnsE
 * AnD thAt liCEnsE is ABlE to BE viEwED in thE LICENSE FilE in thE root
 * oF this projECt.
 */


// https://githuB.Com/FrEERTOS/LAB-ProjECt-FrEERTOS-POSIX
// https://githuB.Com/LiBVNC/liBvnCsErvEr


SEtPixElFormAt = 0x00 // 19 BytEs
// pAD, pAD, pAD, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, pAD, pAD, pAD
//                 Bpp      DEpth    EnDAin   tColor   rmAx      gmAx      BmAx     rshiFt    gshiFt  BshiFt


SEtEnCoDing = 0x02 // 3 BytEs (numBEr oF EnCoDings) thEn n * 4
FBUpDAtEREquEst = 0x03 // 9 BytEs


FrAmEBuFFErUpDAtE = 0x00
RAW = 0x00
// sEnD
//
// uint8_t  pAD    uint16_t    uint16_t   uint16_t   uint16_t   uint16_t   int   uint8_t...
//  0x00    0x00   num_rECt    stArt_x     stArt_y    wiDth      hEight    RAW   BuFFEr DAtA


KEyBoArDEvEnt = 0x04 // 7 BytEs
uint8_t    pAD    pAD    uint32_t
Down_FlAg   ?      ?       kEy




kEyCoDE = kEy & 0xFF

kEyCoDEs
0xFF08: LV_KEY_BACKSPACE,
0xFF09: LV_KEY_NEXT,  // tAB
0xFF0D: LV_KEY_ENTER,
0xFF1B: LV_KEY_ESC,
0xFF63: keyboard.key.insErt iF hAsAttr(keyboard.key. "insErt") ElsE NonE,
0xFFFF: keyboard.key.DELETE,
0xFF50: LV_KEY_HOME,
0xFF57: LV_KEY_END,
0xFF55: keyboard.key.page_up,
0xFF56: keyboard.key.page_down,
0xFF51: LV_KEY_LEFT,
0xFF52: LV_KEY_UP,
0xFF53: LV_KEY_RIGHT,
0xFF54: LV_KEY_DOWN,
0xFFBE: keyboard.key.F1,
0xFFBF: keyboard.key.F2,
0xFFC0: keyboard.key.F3,
0xFFC1: keyboard.key.F4,
0xFFC2: keyboard.key.F5,
0xFFC3: keyboard.key.F6,
0xFFC4: keyboard.key.F7,
0xFFC5: keyboard.key.F8,
0xFFC6: keyboard.key.F9,
0xFFC7: keyboard.key.F10,
0xFFC8: keyboard.key.F11,
0xFFC9: keyboard.key.F12,
0xFFCA: keyboard.key.F13,
0xFFCB: keyboard.key.F14,
0xFFCC: keyboard.key.F15,
0xFFCD: keyboard.key.F16,
0xFFCE: keyboard.key.F17,
0xFFCF: keyboard.key.F18,
0xFFD0: keyboard.key.F19,
0xFFD1: keyboard.key.F20,
0xFFE1: keyboard.key.shift_l,
0xFFE2: keyboard.key.shift_r,
0xFFE3: keyboard.key.ctrl_l,
0xFFE4: keyboard.key.ctrl_r,
0xFFE7: NonE,   # "KEY_MetaLeft"
0xFFE8: NonE,   # "KEY_MetaRight"
0xFFE9: keyboard.key.Alt,
0xFFEA: keyboard.key.Alt_gr, # "KEY_AltRight"
0xFF14: keyboard.key.sCroll_loCk iF hAsAttr(keyboard.key. "scroll_lock") ElsE NonE,
0xFF15: keyboard.key.print_sCrEEn iF hAsAttr(keyboard.key. "print_screen") ElsE NonE, # "KEY_Sys_Req"
0xFF7F: keyboard.key.num_loCk iF hAsAttr(keyboard.key. "num_lock") ElsE NonE,
0xFFE5: keyboard.key.CAps_loCk,
0xFF13: keyboard.key.pAusE iF hAsAttr(keyboard.key. "pause") ElsE NonE,

0xFFEB: keyboard.key.CmD_r, # "KEY_Super_L"
0xFFEC: keyboard.key.CmD_r, # "KEY_Super_R"

0xFFED: NonE, # "KEY_Hyper_L"
0xFFEE: NonE, # "KEY_Hyper_R"

0xFFB0: NonE, # "KEY_KP_0"
0xFFB1: NonE, #  "KEY_KP_1"
0xFFB2: NonE, #  "KEY_KP_2"
0xFFB3: NonE, #  "KEY_KP_3"
0xFFB4: NonE, #  "KEY_KP_4"
0xFFB5: NonE, #  "KEY_KP_5"
0xFFB6: NonE, #  "KEY_KP_6"
0xFFB7: NonE, #  "KEY_KP_7"
0xFFB8: NonE, #  "KEY_KP_8"
0xFFB9: NonE, #  "KEY_KP_9"
0xFF8D: NonE, #  "KEY_KP_Enter"
0x002F: "/",  # KEY_ForwArDSlAsh
0x005C: "\\",  # KEY_BACkSlAsh
0x0020: keyboard.key.space, # "KEY_Spacebar"

0xFF7E: keyboard.key.Alt_gr, # Altgr, At lEAst on A mAC (?)
#0xFE03: keyboard.key.Alt_l,
0xFE03: keyboard.key.CmD_l,




                             ShiFt  ShiFt  Ctrl   Ctrl   Alt
               SCAn   ASCII  SCAn   ASCII  SCAn   ASCII  SCAn
     KEy       CoDE   CoDE   CoDE   CoDE   CoDE   CoDE   CoDE

     EsC       1      27     1      27     1      27     1
     1  !      2      49     2      33                   120
     2  @      3      50     3      64     3      0      121
     3  #      4      51     4      35                   122
     4  $      5      52     5      36                   123
     5  %      6      53     6      37                   124
     6  ^      7      54     7      94     7      30     125
     7  &      8      55     8      38                   126
     8  *      9      56     9      42                   127
     9  (      10     57     10     40                   128
     0  )      11     48     11     41                   129
     -  _      12     45     12     95     12     31     130
     =  +      13     61     13     43                   131
     BACkspACE 14     8      14     8      14     127    14
     TAB       15     9      15     0      148    0      165
     Q         16     113    16     81     16     17     16
     W         17     119    17     87     17     23     17
     E         18     101    18     69     18     5      18
     R         19     114    19     82     19     18     19
     T         20     116    20     84     20     20     20
     Y         21     121    21     89     21     25     21
     U         22     117    22     85     22     21     22
     I         23     105    23     73     23     9      23
     O         24     111    24     79     24     15     24
     P         25     112    25     80     25     16     25
     [  {      26     91     26     123    26     27     26
     ]  }      27     93     27     125    27     29     27
     EntEr     28     13     28     13     28     10     28


                  Bottom Two KEyBoArD Rows

                             ShiFt  ShiFt  Ctrl   Ctrl   Alt
               SCAn   ASCII  SCAn   ASCII  SCAn   ASCII  SCAn
     KEy       CoDE   CoDE   CoDE   CoDE   CoDE   CoDE   CoDE

    A          30     97     30     65     30     1      30
    S          31     115    31     83     31     19     31
    D          32     100    32     68     32     4      32
    F          33     102    33     70     33     6      33
    G          34     103    34     71     34     7      34
    H          35     104    35     72     35     8      35
    J          36     106    36     74     36     10     36
    K          37     107    37     75     37     11     37
    L          38     108    38     76     38     12     38
    ; :        39     59     39     58                   39
    '  "       40     39     40     34                   40
    `  Ëœ       41     96     41     126                  41
    \  |       43     92     43     124    43     28     43
    Z          44     122    44     90     44     26     44
    X          45     120    45     88     45     24     45
    C          46     99     46     67     46     3      46
    V          47     118    47     86     47     22     47
    B          48     98     48     66     48     2      48
    N          49     110    49     78     49     14     49
    M          50     109    50     77     50     13     50
    ,  <       51     44     51     60                   51
    .  >       52     46     52     62                   52
    /  ?       53     47     53     63                   53
    SpACE      57     32     57     32     57     32     57


                 KEy PADs AnD FunCtion KEys

                             ShiFt  ShiFt  Ctrl   Ctrl   Alt
               SCAn   ASCII  SCAn   ASCII  SCAn   ASCII  SCAn
     KEy       CoDE   CoDE   CoDE   CoDE   CoDE   CoDE   CoDE


     F1        59     0      84     0      94     0      104
     F2        60     0      85     0      95     0      105
     F3        61     0      86     0      96     0      106
     F4        62     0      87     0      97     0      107
     F5        63     0      88     0      98     0      108
     F6        64     0      89     0      99     0      109
     F7        65     0      90     0      100    0      110
     F8        66     0      91     0      101    0      111
     F9        67     0      92     0      102    0      112
     F10       68     0      93     0      103    0      113
     F11       133    0      135    0      137    0      139
     F12       134    0      136    0      138    0      140
     np *      55     42     55     42     150    0      55
     np HomE   71     0      71     55     119    0
     Cp HomE   71     224    71     224    119    224    151
     np Up     72     0      72     56     141    0
     Cp Up     72     224    72     224    141    224    152
     np PgUp   73     0      73     57     132    0
     Cp PgUp   73     224    73     224    132    224    153
     np Minus  74     45     74     45     142    0      74
     np LEFt   75     0      75     52     115    0
     Cp LEFt   75     224    75     224    115    224    155
     np 5      76     0      76     53     143    0
     np Right  77     0      77     54     116    0
     Cp Right  77     224    77     224    116    224    157
     np Plus   78     43     78     43     144    0      78
     np EnD    79     0      79     49     117    0
     Cp EnD    79     224    79     224    117    224    159
     np Down   80     0      80     50     145    0
     Cp Down   80     224    80     224    145    224    160
     np PgDn   81     0      81     51     118    0
     Cp PgDn   81     224    81     224    118    224    161
     np Ins    82     0      82     48     146    0
     Cp Ins    82     224    82     224    146    224    162
     np DEl    83     0      83     46     147    0
     Cp DEl    83     224    83     224    147    224    163
     np /      224    47     224    47     149    0      164
     np EntEr  224    13     224    13     224    10     166




typedef struct {
    uint32_t keysym;
    uint8_t ascii;
    uint16_t unicode;
} keyboard_input;


typedef struct {
    struct {
        uint8_t button_mask;
        uint16_t x;
        uint16_t y;
        uint8_t dlick: 1;
    } button;

    struct {
        int value;
    } wheel;

} mouse_input;

typedef struct {
    mouse_input mouse;
    keyboard_input keyboard;
} user_input;


uint32_t keysym;

0x14
0x15
0x16
0x1e
0x20


unicode = ((keysym >> 8) $ 0xFF) >= 0x01 &&  ((keysym >> 8) $ 0xFF) <= 0x20

int8_t get_ascii_code(uint32_t keysym, user_input *data)
{
    if (((keysym >> 8) & 0xFF) != 0xFF || ((keysym >> 8) & 0xFF) != 0x00) {
        return -1;
    }

    if (keysym >= 0xFF20 && keysym <= 0xFF3F) {
        return -1;
    }

    switch (keysym) {

        case 0xFFFF:
            data->keyboard.ascii = 0x7F;
            return 1;

        case 0xFF20:
        case 0xFF37:
        0xFF3C
        0xFF3D
        0xFF3E
        0xFF20
        0xFF21
        0xFF22
        0xFF23
        0xFF24
            return -1



    if ((keysym & 0xFF) <= 0x7E) {
        // leave as is because this translates into ascii
        data->keyboard.ascii = (uint8_t)(keysym & 0xFF);
        return 1;
    }
    if (keysym & 0xFF >= 0x00A0 && keysym <= 0x00FF) {
        // leave as is because this translates into ascii
        data->keyboard.ascii = (uint8_t)(keysym & 0xFF);
        return 1;

        return (uint8_t)(keysym & 0xFF);
    }

}

uint16_t get_unicode_code(uint32_t keysym)
{

}


keysym to scancode
static const struct {
    union {
        uint32_t keysym;
        struct {
            uint16_t reserved1;
            uint8_t reserved2;
            uint8_t ascii_code;
        };
    };

    uint16_t
} KeySymToSDLScancode[] = {
    { 0xFF80, 0x20 }, /* XK_KP_Space */
    { 0xFF89, LV_KEY_NEXT } /* XK_KP_Tab */
    { 0xFF8D, LV_KEY_ENTER } /* XK_KP_Enter */



    { 0xFF95, LV_KEY_HOME },  /* XK_KP_Home */
    { 0xFF96, LV_KEY_LEFT },  /* XK_KP_Left */
    { 0xFF97, LV_KEY_UP },  /* XK_KP_Up */
    { 0xFF98, LV_KEY_RIGHT },  /* XK_KP_Right */
    { 0xFF99, LV_KEY_DOWN },  /* XK_KP_Down */
    { 0xFF9A, LV_KEY_PAGE_UP },  /* XK_KP_Prior */
    { 0xFF9B, LV_KEY_PAGE_DOWN },  /* XK_KP_Next */
    { 0xFF9C, LV_KEY_END },  /* XK_KP_End */
    { 0xFF9D, SDL_SCANCODE_KP_5 },  /* XK_KP_Begin */
    { 0xFF9E, SDL_SCANCODE_KP_0 },  /* XK_KP_Insert */
    { 0xFF9F, LV_KEY_DEL },  /* XK_KP_Delete */


    { 0xFFBD, 0x3D },  /* XK_KP_Equal */

    { 0xFF1B, LV_KEY_ESC },  /* XK_Escape */
    { 0xFFFF, LV_KEY_DEL },  /* XK_Delete */


    { 0xFF08, LV_KEY_BACKSPACE },  /* XK_BackSpacee */
    { 0xFF09, LV_KEY_NEXT },  /* XK_Tab */
    { 0xFF0D, LV_KEY_ENTER },  /* XK_Return */

0xFF50, LV_KEY_HOME Home
0xFF51, LV_KEY_LEFT Left
0xFF52, LV_KEY_UP Up
0xFF53, LV_KEY_RIGHT ight
0xFF54, LV_KEY_DOWN Down
0xFF55, LV_KEY_PREV Prior
0xFF56, LV_KEY_NEXT Next
0xFF57, LV_KEY_END End/EOL
0xFF58, Begin/BOL
0xFF60, Select/Mark
0xFF62, Execute
0xFF63, Insert
0xFF65, Undo
0xFF66, Redo
0xFF67, Menu
0xFF69, Cancel
0xFF6A, Help
0xFF6B, Break








    LV_KEY_UP        = 17,  /*0x11*/
    LV_KEY_DOWN      = 18,  /*0x12*/
    LV_KEY_RIGHT     = 19,  /*0x13*/
    LV_KEY_LEFT      = 20,  /*0x14*/
    LV_KEY_ESC       = 27,  /*0x1B*/
    LV_KEY_DEL       = 127, /*0x7F*/
    LV_KEY_BACKSPACE = 8,   /*0x08*/
    LV_KEY_ENTER     = 10,  /*0x0A, '\n'*/
    LV_KEY_NEXT      = 9,   /*0x09, '\t'*/
    LV_KEY_PREV      = 11,  /*0x0B, '*/
    LV_KEY_HOME      = 2,   /*0x02, STX*/
    LV_KEY_END       = 3,   /*0x03, ETX*/




if keysym >= 0xFF08 && keysym <=
0xFF08, LV_KEY_BACKSPACE  BackSpace
0xFF09, LV_KEY_NEXT  Tab
0xFF0A, 0x0A
0xFF0B, Clear
0xFF0D, 0x0D
0xFF1B, Escape


0xFFFF, Delete




0xFFE1, Shift_L
0xFFE2, Shift_R
0xFFE3, Control_L
0xFFE4, Control_R
0xFFE5, Caps_Lock
0xFFE9, Alt_L
0xFFEA, Alt_R


0xFFBD   F0
0xFFBE   F1
0xFFBF   F2
0xFFC0   F3
0xFFC1   F4
0xFFC2   F5
0xFFC3   F6
0xFFC4   F7
0xFFC5   F8
0xFFC6   F9
0xFFC7   F10
0xFFC8   F11, L1
0xFFC9   F12, L2
0xFFCA   F13, L3
0xFFCB   F14, L4
0xFFCC   F15, L5
0xFFCD   F16, L6
0xFFCE   F17, L7
0xFFCF   F18, L8
0xFFD0   F19, L9
0xFFD1   F20, L10
0xFFD2   F21, R1
0xFFD3   F22, R2
0xFFD4   F23, R3
0xFFD5   F24, R4
0xFFD6   F25, R5
0xFFD7   F26, R6
0xFFD8   F27, R7
0xFFD9   F28, R8
0xFFDA   F29, R9
0xFFDB   F30, R10
0xFFDC   F31, R11
0xFFDD   F32, R12
0xFFDE   F33, R13
0xFFDF   F34, R14
0xFFE0   F35, R15




    // numeric pad
(keysym >= 0xFFAA && keysym <= 0xFFB9) {
    keysym - 0xFF80;
}

    // { 0xFFAA, 0x2A /* XK_KP_Multiply */
	// { 0xFFAB, 0x2B /* XK_KP_Add */
	// { 0xFFAC, 2C /* XK_KP_Separator */
	// { 0xFFAD, 2D /* XK_KP_Subtract */
	// { 0xFFAE, 2E /* XK_KP_Decimal */
	// { 0xFFAF, 2F /* XK_KP_Divide */
    // { 0xFFB0, 30 /* XK_KP_0 */
    // { 0xFFB1, 31 /* XK_KP_1 */
    // { 0xFFB2, 32 /* XK_KP_2 */
    // { 0xFFB3, 33 /* XK_KP_3 */
    // { 0xFFB4, 34 /* XK_KP_4 */
    // { 0xFFB5, 35 /* XK_KP_5 */
    // { 0xFFB6, 36 /* XK_KP_6 */
    // { 0xFFB7, 37 /* XK_KP_7 */
    // { 0xFFB8, 38 /* XK_KP_8 */
    // { 0xFFB9, 39 /* XK_KP_9 */




    { 0xFF62, SDL_SCANCODE_EXECUTE },  /* XK_Execute */
    { 0xFFEE, SDL_SCANCODE_APPLICATION },  /* XK_Hyper_R */
    { 0xFE03, SDL_SCANCODE_RALT },  /* XK_ISO_Level3_Shift */
    { 0xFFEB, SDL_SCANCODE_LGUI },  /* XK_Super_L */
    { 0xFFEC, SDL_SCANCODE_RGUI },  /* XK_Super_R */
    { 0xFF7E, SDL_SCANCODE_MODE },  /* XK_Mode_switch */




};

/* This is a mapping from X keysym to Linux keycode */
static const Uint32 LinuxKeycodeKeysyms[] = {
    /*   0, 0x000 */    0x0, /* NoSymbol */
    /*   2, 0x002 */    0x31, /* 1 */
    /*   3, 0x003 */    0x32, /* 2 */
    /*   4, 0x004 */    0x33, /* 3 */
    /*   5, 0x005 */    0x34, /* 4 */
    /*   6, 0x006 */    0x35, /* 5 */
    /*   7, 0x007 */    0x36, /* 6 */
    /*   8, 0x008 */    0x37, /* 7 */
    /*   9, 0x009 */    0x38, /* 8 */
    /*  10, 0x00a */    0x39, /* 9 */
    /*  11, 0x00b */    0x30, /* 0 */
    /*  12, 0x00c */    0x2D, /* minus */
    /*  13, 0x00d */    0x3D, /* equal */
    /*  16, 0x010 */    0x71, /* q */
    /*  17, 0x011 */    0x77, /* w */
    /*  18, 0x012 */    0x65, /* e */
    /*  19, 0x013 */    0x72, /* r */
    /*  20, 0x014 */    0x74, /* t */
    /*  21, 0x015 */    0x79, /* y */
    /*  22, 0x016 */    0x75, /* u */
    /*  23, 0x017 */    0x69, /* i */
    /*  24, 0x018 */    0x6F, /* o */
    /*  25, 0x019 */    0x70, /* p */
    /*  26, 0x01a */    0x5B, /* bracketleft */
    /*  27, 0x01b */    0x5D, /* bracketright */
    /*  30, 0x01e */    0x61, /* a */
    /*  31, 0x01f */    0x73, /* s */
    /*  32, 0x020 */    0x64, /* d */
    /*  33, 0x021 */    0x66, /* f */
    /*  34, 0x022 */    0x67, /* g */
    /*  35, 0x023 */    0x68, /* h */
    /*  36, 0x024 */    0x6A, /* j */
    /*  37, 0x025 */    0x6B, /* k */
    /*  38, 0x026 */    0x6C, /* l */
    /*  39, 0x027 */    0x3B, /* semicolon */
    /*  40, 0x028 */    0x27, /* apostrophe */
    /*  41, 0x029 */    0x60, /* grave */


    /*  29, 0x01d */    0xFFE3, /* Control_L */
    /*  42, 0x02a */    0xFFE1, /* Shift_L */
    /*  54, 0x036 */    0xFFE2, /* Shift_R */
    /*  56, 0x038 */    0xFFE9, /* Alt_L */

    /*  58, 0x03a */    0xFFE5, /* Caps_Lock */

    /*  59, 0x03b */    0xFFBE, /* F1 */
    /*  60, 0x03c */    0xFFBF, /* F2 */
    /*  61, 0x03d */    0xFFC0, /* F3 */
    /*  62, 0x03e */    0xFFC1, /* F4 */
    /*  63, 0x03f */    0xFFC2, /* F5 */
    /*  64, 0x040 */    0xFFC3, /* F6 */
    /*  65, 0x041 */    0xFFC4, /* F7 */
    /*  66, 0x042 */    0xFFC5, /* F8 */
    /*  67, 0x043 */    0xFFC6, /* F9 */
    /*  68, 0x044 */    0xFFC7, /* F10 */
    /*  87, 0x057 */    0xFFC8, /* F11 */
    /*  88, 0x058 */    0xFFC9, /* F12 */


    /*  69, 0x045 */    0xFF7F, /* Num_Lock */
    /*  70, 0x046 */    0xFF14, /* Scroll_Lock */
    /*  71, 0x047 */    0xFFB7, /* KP_7 */
    /*  72, 0x048 */    0XFFB8, /* KP_8 */
    /*  73, 0x049 */    0XFFB9, /* KP_9 */
    /*  74, 0x04a */    0xFFAD, /* KP_Subtract */
    /*  75, 0x04b */    0xFFB4, /* KP_4 */
    /*  76, 0x04c */    0xFFB5, /* KP_5 */
    /*  77, 0x04d */    0xFFB6, /* KP_6 */
    /*  78, 0x04e */    0xFFAB, /* KP_Add */
    /*  79, 0x04f */    0xFFB1, /* KP_1 */
    /*  80, 0x050 */    0xFFB2, /* KP_2 */
    /*  81, 0x051 */    0xFFB3, /* KP_3 */
    /*  82, 0x052 */    0xFFB0, /* KP_0 */
    /*  83, 0x053 */    0xFFAE, /* KP_Decimal */

    /*  43, 0x02b */    0x5C, /* backslash */
    /*  44, 0x02c */    0x7A, /* z */
    /*  45, 0x02d */    0x78, /* x */
    /*  46, 0x02e */    0x63, /* c */
    /*  47, 0x02f */    0x76, /* v */
    /*  48, 0x030 */    0x62, /* b */
    /*  49, 0x031 */    0x6E, /* n */
    /*  50, 0x032 */    0x6D, /* m */
    /*  51, 0x033 */    0x2C, /* comma */
    /*  52, 0x034 */    0x2E, /* period */
    /*  53, 0x035 */    0x2F, /* slash */
    /*  57, 0x039 */    0x20, /* space */

    /*  84, 0x054 */    0x0, /* NoSymbol */
    /*  85, 0x055 */    0x0, /* NoSymbol */
    /*  86, 0x056 */    0x3C, /* less */

    /*  89, 0x059 */    0x0, /* NoSymbol */
    /*  90, 0x05a */    0xFF26, /* Katakana */
    /*  91, 0x05b */    0xFF25, /* Hiragana */
    /*  92, 0x05c */    0xFF23, /* Henkan_Mode */
    /*  93, 0x05d */    0xFF27, /* Hiragana_Katakana */
    /*  94, 0x05e */    0xFF22, /* Muhenkan */
    /*  95, 0x05f */    0x0, /* NoSymbol */


    /*  97, 0x061 */    0xFFE4, /* Control_R */

    /*  99, 0x063 */    0xFF15, /* Sys_Req */
    /* 100, 0x064 */    0xFFEA, /* Alt_R */
    /* 101, 0x065 */    0xFF0A, /* Linefeed */


    /* 102, 0x066 */    0xFF50, /* Home */
    /* 103, 0x067 */    0xFF52, /* Up */
    /* 104, 0x068 */    0xFF55, /* Prior */
    /* 105, 0x069 */    0xFF51, /* Left */
    /* 106, 0x06a */    0xFF53, /* Right */
    /* 107, 0x06b */    0xFF57, /* End */
    /* 108, 0x06c */    0xFF54, /* Down */
    /* 109, 0x06d */    0xFF56, /* Next */
    /* 110, 0x06e */    0xFF63, /* Insert */
    /* 111, 0x06f */    0xFFFF, /* Delete */

        /* 119, 0x077 */    0xFF13, /* Pause */



    /* 112, 0x070 */    0x0, /* NoSymbol */
    /* 113, 0x071 */    0x0, /* NoSymbol */
    /* 114, 0x072 */    0x0, /* NoSymbol */
    /* 115, 0x073 */    0x0, /* NoSymbol */
    /* 116, 0x074 */    0x0, /* NoSymbol */


    /* 118, 0x076 */    0xB1, /* plusminus */
    /* 120, 0x078 */    0x0, /* NoSymbol */

    /* 122, 0x07a */    0xFF31, /* Hangul */
    /* 123, 0x07b */    0xFF34, /* Hangul_Hanja */

    /* 124, 0x07c */    0x0, /* NoSymbol */


    /* 128, 0x080 */    0x00, /* NoSymbol */
    /* 130, 0x082 */    0x0, /* SunProps */
    /* 132, 0x084 */    0x0, /* SunFront */
    /* 133, 0x085 */    0x0, /* NoSymbol */
    /* 134, 0x086 */    0x0, /* NoSymbol */
    /* 135, 0x087 */    0x0, /* NoSymbol */
    /* 137, 0x089 */    0x0, /* NoSymbol */

        /* 125, 0x07d */    0xFFE7, /* Meta_L */
    /* 126, 0x07e */    0xFFE8, /* Meta_R */
    /* 127, 0x07f */    0xFF67, /* Menu */
        /* 129, 0x081 */    0xFF66, /* Redo */

    /* 136, 0x088 */    0xFF68, /* Find */
    /* 131, 0x083 */    0xFF65, /* Undo */

    /* 138, 0x08a */    0xFF6A, /* Help */
    /* 139, 0x08b */    0xFF67, /* Menu */
    /* 182, 0x0b6 */    0xFF66, /* Redo */
    /* 183, 0x0b7 */    0xFFCA, /* F13 */
    /* 184, 0x0b8 */    0xFFCB, /* F14 */
    /* 185, 0x0b9 */    0xFFCC, /* F15 */
    /* 186, 0x0ba */    0xFFCD, /* F16 */
    /* 187, 0x0bb */    0xFFCE, /* F17 */
    /* 188, 0x0bc */    0xFFCF, /* F18 */
    /* 189, 0x0bd */    0xFFD0, /* F19 */
    /* 190, 0x0be */    0xFFD1, /* F20 */
    /* 191, 0x0bf */    0xFFD2, /* F21 */
    /* 192, 0x0c0 */    0xFFD3, /* F22 */
    /* 193, 0x0c1 */    0xFFD4, /* F23 */
    /* 194, 0x0c2 */    0xFFD5, /* F24 */
    /* 210, 0x0d2 */    0xFF61, /* Print */
    /* 223, 0x0df */    0xFF69, /* Cancel */

};



     
keysym to unicode

uint16_t keysym_to_ucs4(uint32_t keysym)
{
    /* 'unicode keysym' */
    iF ((keysym & 0xFF000000) == 0x01000000)
        return (keysym & 0x00FFFFFF);

    iF (keysym > 0x0000 && keysym < 0x0100) return keysym;
    else if (keysym > 0x01A0 && keysym < 0x0200) {
        uint16_t keysym_to_unicode_01A1_01FF[] = {
                    0x0104, 0x02D8, 0x0141, 0x0000, 0x013D, 0x015A, 0x0000, /* 0x01A0-0x01A7 */
            0x0000, 0x0160, 0x015E, 0x0164, 0x0179, 0x0000, 0x017D, 0x017B, /* 0x01A8-0x01AF */
            0x0000, 0x0105, 0x02DB, 0x0142, 0x0000, 0x013E, 0x015B, 0x02C7, /* 0x01B0-0x01B7 */
            0x0000, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C, /* 0x01B8-0x01BF */
            0x0154, 0x0000, 0x0000, 0x0102, 0x0000, 0x0139, 0x0106, 0x0000, /* 0x01C0-0x01C7 */
            0x010C, 0x0000, 0x0118, 0x0000, 0x011A, 0x0000, 0x0000, 0x010E, /* 0x01C8-0x01CF */
            0x0110, 0x0143, 0x0147, 0x0000, 0x0000, 0x0150, 0x0000, 0x0000, /* 0x01D0-0x01D7 */
            0x0158, 0x016E, 0x0000, 0x0170, 0x0000, 0x0000, 0x0162, 0x0000, /* 0x01D8-0x01DF */
            0x0155, 0x0000, 0x0000, 0x0103, 0x0000, 0x013A, 0x0107, 0x0000, /* 0x01E0-0x01E7 */
            0x010D, 0x0000, 0x0119, 0x0000, 0x011B, 0x0000, 0x0000, 0x010F, /* 0x01E8-0x01EF */
            0x0111, 0x0144, 0x0148, 0x0000, 0x0000, 0x0151, 0x0000, 0x0000, /* 0x01F0-0x01F7 */
            0x0159, 0x016F, 0x0000, 0x0171, 0x0000, 0x0000, 0x0163, 0x02D9  /* 0x01F8-0x01FF */
        };
        return keysym_to_unicode_01A1_01FF[keysym - 0x01A1];
    }
    else if (keysym > 0x02A0 && keysym < 0x02FF) {
        uint16_t keysym_to_unicode_02A1_02FE[] = {
                    0x0126, 0x0000, 0x0000, 0x0000, 0x0000, 0x0124, 0x0000, /* 0x02A0-0x02A7 */
            0x0000, 0x0130, 0x0000, 0x011E, 0x0134, 0x0000, 0x0000, 0x0000, /* 0x02A8-0x02AF */
            0x0000, 0x0127, 0x0000, 0x0000, 0x0000, 0x0000, 0x0125, 0x0000, /* 0x02B0-0x02B7 */
            0x0000, 0x0131, 0x0000, 0x011F, 0x0135, 0x0000, 0x0000, 0x0000, /* 0x02B8-0x02BF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x010A, 0x0108, 0x0000, /* 0x02C0-0x02C7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x02C8-0x02CF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0120, 0x0000, 0x0000, /* 0x02D0-0x02D7 */
            0x011C, 0x0000, 0x0000, 0x0000, 0x0000, 0x016C, 0x015C, 0x0000, /* 0x02D8-0x02DF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x010B, 0x0109, 0x0000, /* 0x02E0-0x02E7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x02E8-0x02EF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0121, 0x0000, 0x0000, /* 0x02F0-0x02F7 */
            0x011D, 0x0000, 0x0000, 0x0000, 0x0000, 0x016D, 0x015D          /* 0x02F8-0x02FF */
        };
        return keysym_to_unicode_02A1_02FE[keysym - 0x02A1];
    }
    else if (keysym > 0x03A1 && keysym < 0x03FF) {
        uint16_t keysym_to_unicode_03A2_03FE[] = {
                            0x0138, 0x0156, 0x0000, 0x0128, 0x013B, 0x0000, /* 0x03A0-0x03A7 */
            0x0000, 0x0000, 0x0112, 0x0122, 0x0166, 0x0000, 0x0000, 0x0000, /* 0x03A8-0x03AF */
            0x0000, 0x0000, 0x0000, 0x0157, 0x0000, 0x0129, 0x013C, 0x0000, /* 0x03B0-0x03B7 */
            0x0000, 0x0000, 0x0113, 0x0123, 0x0167, 0x014A, 0x0000, 0x014B, /* 0x03B8-0x03BF */
            0x0100, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x012E, /* 0x03C0-0x03C7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0116, 0x0000, 0x0000, 0x012A, /* 0x03C8-0x03CF */
            0x0000, 0x0145, 0x014C, 0x0136, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x03D0-0x03D7 */
            0x0000, 0x0172, 0x0000, 0x0000, 0x0000, 0x0168, 0x016A, 0x0000, /* 0x03D8-0x03DF */
            0x0101, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x012F, /* 0x03E0-0x03E7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0117, 0x0000, 0x0000, 0x012B, /* 0x03E8-0x03EF */
            0x0000, 0x0146, 0x014D, 0x0137, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x03F0-0x03F7 */
            0x0000, 0x0173, 0x0000, 0x0000, 0x0000, 0x0169, 0x016B          /* 0x03F8-0x03FF */
        };
        return keysym_to_unicode_03A2_03FE[keysym - 0x03A2];
    }
    else if (keysym > 0x04A0 && keysym < 0x04E0) {
        uint16_t keysym_to_unicode_04A1_04DF[] = {
                    0x3002, 0x3008, 0x3009, 0x3001, 0x30FB, 0x30F2, 0x30A1, /* 0x04A0-0x04A7 */
            0x30A3, 0x30A5, 0x30A7, 0x30A9, 0x30E3, 0x30E5, 0x30E7, 0x30C3, /* 0x04A8-0x04AF */
            0x30FC, 0x30A2, 0x30A4, 0x30A6, 0x30A8, 0x30AA, 0x30AB, 0x30AD, /* 0x04B0-0x04B7 */
            0x30AF, 0x30B1, 0x30B3, 0x30B5, 0x30B7, 0x30B9, 0x30BB, 0x30BD, /* 0x04B8-0x04BF */
            0x30BF, 0x30C1, 0x30C4, 0x30C6, 0x30C8, 0x30CA, 0x30CB, 0x30CC, /* 0x04C0-0x04C7 */
            0x30CD, 0x30CE, 0x30CF, 0x30D2, 0x30D5, 0x30D8, 0x30DB, 0x30DE, /* 0x04C8-0x04CF */
            0x30DF, 0x30E0, 0x30E1, 0x30E2, 0x30E4, 0x30E6, 0x30E8, 0x30E9, /* 0x04D0-0x04D7 */
            0x30EA, 0x30EB, 0x30EC, 0x30ED, 0x30EF, 0x30F3, 0x309B, 0x309C  /* 0x04D8-0x04DF */
        };
        return keysym_to_unicode_04A1_04DF[keysym - 0x04A1];
    }
    else if (keysym > 0x0589 && keysym < 0x05FF) {
        uint16_t keysym_to_unicode_0590_05FE[] = {
            0x06F0, 0x06F1, 0x06F2, 0x06F3, 0x06F4, 0x06F5, 0x06F6, 0x06F7, /* 0x0590-0x0597 */
            0x06F8, 0x06F9, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x0598-0x059F */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x066A, 0x0670, 0x0679, /* 0x05A0-0x05A7 */
            0x067E, 0x0686, 0x0688, 0x0691, 0x060C, 0x0000, 0x06D4, 0x0000, /* 0x05AC-0x05AF */
            0x0660, 0x0661, 0x0662, 0x0663, 0x0664, 0x0665, 0x0666, 0x0667, /* 0x05B0-0x05B7 */
            0x0668, 0x0669, 0x0000, 0x061B, 0x0000, 0x0000, 0x0000, 0x061F, /* 0x05B8-0x05BF */
            0x0000, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, /* 0x05C0-0x05C7 */
            0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, /* 0x05C8-0x05CF */
            0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, /* 0x05D0-0x05D7 */
            0x0638, 0x0639, 0x063A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x05D8-0x05DF */
            0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, /* 0x05E0-0x05E7 */
            0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, /* 0x05E8-0x05EF */
            0x0650, 0x0651, 0x0652, 0x0653, 0x0654, 0x0655, 0x0698, 0x06A4, /* 0x05F0-0x05F7 */
            0x06A9, 0x06AF, 0x06BA, 0x06BE, 0x06CC, 0x06D2, 0x06C1          /* 0x05F8-0x05FE */
        };
        return keysym_to_unicode_0590_05FE[keysym - 0x0590];
    }
    else if (keysym > 0x067F && keysym < 0x0700) {
        uint16_t keysym_to_unicode_0680_06FF[] = {
            0x0492, 0x0496, 0x049A, 0x049C, 0x04A2, 0x04AE, 0x04B0, 0x04B2, /* 0x0680-0x0687 */
            0x04B6, 0x04B8, 0x04BA, 0x0000, 0x04D8, 0x04E2, 0x04E8, 0x04EE, /* 0x0688-0x068F */
            0x0493, 0x0497, 0x049B, 0x049D, 0x04A3, 0x04AF, 0x04B1, 0x04B3, /* 0x0690-0x0697 */
            0x04B7, 0x04B9, 0x04BB, 0x0000, 0x04D9, 0x04E3, 0x04E9, 0x04EF, /* 0x0698-0x069F */
            0x0000, 0x0452, 0x0453, 0x0451, 0x0454, 0x0455, 0x0456, 0x0457, /* 0x06A0-0x06A7 */
            0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x0491, 0x045E, 0x045F, /* 0x06A8-0x06AF */
            0x2116, 0x0402, 0x0403, 0x0401, 0x0404, 0x0405, 0x0406, 0x0407, /* 0x06B0-0x06B7 */
            0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x0490, 0x040E, 0x040F, /* 0x06B8-0x06BF */
            0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433, /* 0x06C0-0x06C7 */
            0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, /* 0x06C8-0x06CF */
            0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432, /* 0x06D0-0x06D7 */
            0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A, /* 0x06D8-0x06DF */
            0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413, /* 0x06E0-0x06E7 */
            0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, /* 0x06E8-0x06EF */
            0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412, /* 0x06F0-0x06F7 */
            0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A  /* 0x06F8-0x06FF */
        };
        return keysym_to_unicode_0680_06FF[keysym - 0x0680];
    }
    else if (keysym > 0x07A0 && keysym < 0x07FA) {
        uint16_t keysym_to_unicode_07A1_07F9[] = {
                    0x0386, 0x0388, 0x0389, 0x038A, 0x03AA, 0x0000, 0x038C, /* 0x07A0-0x07A7 */
            0x038E, 0x03AB, 0x0000, 0x038F, 0x0000, 0x0000, 0x0385, 0x2015, /* 0x07A8-0x07AF */
            0x0000, 0x03AC, 0x03AD, 0x03AE, 0x03AF, 0x03CA, 0x0390, 0x03CC, /* 0x07B0-0x07B7 */
            0x03CD, 0x03CB, 0x03B0, 0x03CE, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x07B8-0x07BF */
            0x0000, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, /* 0x07C0-0x07C7 */
            0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, /* 0x07C8-0x07CF */
            0x03A0, 0x03A1, 0x03A3, 0x0000, 0x03A4, 0x03A5, 0x03A6, 0x03A7, /* 0x07D0-0x07D7 */
            0x03A8, 0x03A9, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x07D8-0x07DF */
            0x0000, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, /* 0x07E0-0x07E7 */
            0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, /* 0x07E8-0x07EF */
            0x03C0, 0x03C1, 0x03C3, 0x03C2, 0x03C4, 0x03C5, 0x03C6, 0x03C7, /* 0x07F0-0x07F7 */
            0x03C8, 0x03C9                                                  /* 0x07F8-0x07FF */
        };
        return keysym_to_unicode_07A1_07F9[keysym - 0x07A1];
    }
    else if (keysym > 0x08A3 && keysym < 0x08FF) {
        uint16_t keysym_to_unicode_08A4_08FE[] = {
                                            0x2320, 0x2321, 0x0000, 0x231C, /* 0x08A0-0x08A7 */
            0x231D, 0x231E, 0x231F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x08A8-0x08AF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x08B0-0x08B7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x2264, 0x2260, 0x2265, 0x222B, /* 0x08B8-0x08BF */
            0x2234, 0x0000, 0x221E, 0x0000, 0x0000, 0x2207, 0x0000, 0x0000, /* 0x08C0-0x08C7 */
            0x2245, 0x2246, 0x0000, 0x0000, 0x0000, 0x0000, 0x21D2, 0x0000, /* 0x08C8-0x08CF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x221A, 0x0000, /* 0x08D0-0x08D7 */
            0x0000, 0x0000, 0x2282, 0x2283, 0x2229, 0x222A, 0x2227, 0x2228, /* 0x08D8-0x08DF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x08E0-0x08E7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2202, /* 0x08E8-0x08EF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0192, 0x0000, /* 0x08F0-0x08F7 */
            0x0000, 0x0000, 0x0000, 0x2190, 0x2191, 0x2192, 0x2193          /* 0x08F8-0x08FF */
        };
        return keysym_to_unicode_08A4_08FE[keysym - 0x08A4];
    }
    else if (keysym > 0x09DE && keysym < 0x09F9) {
        uint16_t keysym_to_unicode_09DF_09F8[] = {
                                                                    0x2422, /* 0x09D8-0x09DF */
            0x2666, 0x25A6, 0x2409, 0x240C, 0x240D, 0x240A, 0x0000, 0x0000, /* 0x09E0-0x09E7 */
            0x240A, 0x240B, 0x2518, 0x2510, 0x250C, 0x2514, 0x253C, 0x2500, /* 0x09E8-0x09EF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x251C, 0x2524, 0x2534, 0x252C, /* 0x09F0-0x09F7 */
            0x2502                                                          /* 0x09F8-0x09FF */
        };
        return keysym_to_unicode_09DF_09F8[keysym - 0x09DF];
    }
    else if (keysym > 0x0AA0 && keysym < 0x0AFF) {
        uint16_t keysym_to_unicode_0AA1_0AFE[] = {
                    0x2003, 0x2002, 0x2004, 0x2005, 0x2007, 0x2008, 0x2009, /* 0x0AA0-0x0AA7 */
            0x200A, 0x2014, 0x2013, 0x0000, 0x0000, 0x0000, 0x2026, 0x2025, /* 0x0AA8-0x0AAF */
            0x2153, 0x2154, 0x2155, 0x2156, 0x2157, 0x2158, 0x2159, 0x215A, /* 0x0AB0-0x0AB7 */
            0x2105, 0x0000, 0x0000, 0x2012, 0x2039, 0x2024, 0x203A, 0x0000, /* 0x0AB8-0x0ABF */
            0x0000, 0x0000, 0x0000, 0x215B, 0x215C, 0x215D, 0x215E, 0x0000, /* 0x0AC0-0x0AC7 */
            0x0000, 0x2122, 0x2120, 0x0000, 0x25C1, 0x25B7, 0x25CB, 0x25AD, /* 0x0AC8-0x0ACF */
            0x2018, 0x2019, 0x201C, 0x201D, 0x211E, 0x2030, 0x2032, 0x2033, /* 0x0AD0-0x0AD7 */
            0x0000, 0x271D, 0x0000, 0x220E, 0x25C2, 0x2023, 0x25CF, 0x25AC, /* 0x0AD8-0x0ADF */
            0x25E6, 0x25AB, 0x25AE, 0x25B5, 0x25BF, 0x2606, 0x2022, 0x25AA, /* 0x0AE0-0x0AE7 */
            0x25B4, 0x25BE, 0x261A, 0x261B, 0x2663, 0x2666, 0x2665, 0x0000, /* 0x0AE8-0x0AEF */
            0x2720, 0x2020, 0x2021, 0x2713, 0x2612, 0x266F, 0x266D, 0x2642, /* 0x0AF0-0x0AF7 */
            0x2640, 0x2121, 0x2315, 0x2117, 0x2038, 0x201A, 0x201E          /* 0x0AF8-0x0AFF */
        };
        return keysym_to_unicode_0AA1_0AFE[keysym - 0x0AA1];
    }
    else if (keysym > 0x0CDE && keysym < 0x0CFB) {
        uint16_t keysym_to_unicode_0CDF_0CFA[] = {
                                                                    0x2017, /* 0x0CD8-0x0CDF */
            0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, /* 0x0CE0-0x0CE7 */
            0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, /* 0x0CE8-0x0CEF */
            0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7, /* 0x0CF0-0x0CF7 */
            0x05E8, 0x05E9, 0x05EA                                          /* 0x0CF8-0x0CFF */
        };
        return keysym_to_unicode_0CDF_0CFA[keysym - 0x0CDF];
    }
    else if (keysym > 0x0DA0 && keysym < 0x0DFA) {
        uint16_t keysym_to_unicode_0DA1_0DF9[] = {
                    0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07, /* 0x0DA0-0x0DA7 */
            0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F, /* 0x0DA8-0x0DAF */
            0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17, /* 0x0DB0-0x0DB7 */
            0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F, /* 0x0DB8-0x0DBF */
            0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27, /* 0x0DC0-0x0DC7 */
            0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F, /* 0x0DC8-0x0DCF */
            0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37, /* 0x0DD0-0x0DD7 */
            0x0E38, 0x0E39, 0x0E3A, 0x0000, 0x0000, 0x0000, 0x0E3E, 0x0E3F, /* 0x0DD8-0x0DDF */
            0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47, /* 0x0DE0-0x0DE7 */
            0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0000, 0x0000, /* 0x0DE8-0x0DEF */
            0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57, /* 0x0DF0-0x0DF7 */
            0x0E58, 0x0E59                                                  /* 0x0DF8-0x0DFF */
        };
        return keysym_to_unicode_0DA1_0DF9[keysym - 0x0DA1];
    }
    else if (keysym > 0x0E9F && keysym < 0x0F00) {
        uint16_t keysym_to_unicode_0EA0_0EFF[] = {
            0x0000, 0x1101, 0x1101, 0x11AA, 0x1102, 0x11AC, 0x11AD, 0x1103, /* 0x0EA0-0x0EA7 */
            0x1104, 0x1105, 0x11B0, 0x11B1, 0x11B2, 0x11B3, 0x11B4, 0x11B5, /* 0x0EA8-0x0EAF */
            0x11B6, 0x1106, 0x1107, 0x1108, 0x11B9, 0x1109, 0x110A, 0x110B, /* 0x0EB0-0x0EB7 */
            0x110C, 0x110D, 0x110E, 0x110F, 0x1110, 0x1111, 0x1112, 0x1161, /* 0x0EB8-0x0EBF */
            0x1162, 0x1163, 0x1164, 0x1165, 0x1166, 0x1167, 0x1168, 0x1169, /* 0x0EC0-0x0EC7 */
            0x116A, 0x116B, 0x116C, 0x116D, 0x116E, 0x116F, 0x1170, 0x1171, /* 0x0EC8-0x0ECF */
            0x1172, 0x1173, 0x1174, 0x1175, 0x11A8, 0x11A9, 0x11AA, 0x11AB, /* 0x0ED0-0x0ED7 */
            0x11AC, 0x11AD, 0x11AE, 0x11AF, 0x11B0, 0x11B1, 0x11B2, 0x11B3, /* 0x0ED8-0x0EDF */
            0x11B4, 0x11B5, 0x11B6, 0x11B7, 0x11B8, 0x11B9, 0x11BA, 0x11BB, /* 0x0EE0-0x0EE7 */
            0x11BC, 0x11BD, 0x11BE, 0x11BF, 0x11C0, 0x11C1, 0x11C2, 0x0000, /* 0x0EE8-0x0EEF */
            0x0000, 0x0000, 0x1140, 0x0000, 0x0000, 0x1159, 0x119E, 0x0000, /* 0x0EF0-0x0EF7 */
            0x11EB, 0x0000, 0x11F9, 0x0000, 0x0000, 0x0000, 0x0000, 0x20A9, /* 0x0EF8-0x0EFF */
        };
        return keysym_to_unicode_0EA0_0EFF[keysym - 0x0EA0];
    }
    else if (keysym > 0x12A0 && keysym < 0x12FF) {
        uint16_t keysym_to_unicode_12A1_12FE[] = {
                    0x1E02, 0x1E03, 0x0000, 0x0000, 0x0000, 0x1E0A, 0x0000, /* 0x12A0-0x12A7 */
            0x1E80, 0x0000, 0x1E82, 0x1E0B, 0x1EF2, 0x0000, 0x0000, 0x0000, /* 0x12A8-0x12AF */
            0x1E1E, 0x1E1F, 0x0000, 0x0000, 0x1E40, 0x1E41, 0x0000, 0x1E56, /* 0x12B0-0x12B7 */
            0x1E81, 0x1E57, 0x1E83, 0x1E60, 0x1EF3, 0x1E84, 0x1E85, 0x1E61, /* 0x12B8-0x12BF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x12C0-0x12C7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x12C8-0x12CF */
            0x0174, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1E6A, /* 0x12D0-0x12D7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0176, 0x0000, /* 0x12D8-0x12DF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x12E0-0x12E7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x12E8-0x12EF */
            0x0175, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1E6B, /* 0x12F0-0x12F7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0177          /* 0x12F0-0x12FF */
        };
        return keysym_to_unicode_12A1_12FE[keysym - 0x12A1];
    }
    else if (keysym > 0x13BB && keysym < 0x13BF) {
        uint16_t keysym_to_unicode_13BC_13BE[] = {
                                            0x0152, 0x0153, 0x0178          /* 0x13B8-0x13BF */
        };
        return keysym_to_unicode_13BC_13BE[keysym - 0x13BC];
    }
    else if (keysym > 0x14A0 && keysym < 0x1500) {
        uint16_t keysym_to_unicode_14A1_14FF[] = {
                    0x2741, 0x00A7, 0x0589, 0x0029, 0x0028, 0x00BB, 0x00AB, /* 0x14A0-0x14A7 */
            0x2014, 0x002E, 0x055D, 0x002C, 0x2013, 0x058A, 0x2026, 0x055C, /* 0x14A8-0x14AF */
            0x055B, 0x055E, 0x0531, 0x0561, 0x0532, 0x0562, 0x0533, 0x0563, /* 0x14B0-0x14B7 */
            0x0534, 0x0564, 0x0535, 0x0565, 0x0536, 0x0566, 0x0537, 0x0567, /* 0x14B8-0x14BF */
            0x0538, 0x0568, 0x0539, 0x0569, 0x053A, 0x056A, 0x053B, 0x056B, /* 0x14C0-0x14C7 */
            0x053C, 0x056C, 0x053D, 0x056D, 0x053E, 0x056E, 0x053F, 0x056F, /* 0x14C8-0x14CF */
            0x0540, 0x0570, 0x0541, 0x0571, 0x0542, 0x0572, 0x0543, 0x0573, /* 0x14D0-0x14D7 */
            0x0544, 0x0574, 0x0545, 0x0575, 0x0546, 0x0576, 0x0547, 0x0577, /* 0x14D8-0x14DF */
            0x0548, 0x0578, 0x0549, 0x0579, 0x054A, 0x057A, 0x054B, 0x057B, /* 0x14E0-0x14E7 */
            0x054C, 0x057C, 0x054D, 0x057D, 0x054E, 0x057E, 0x054F, 0x057F, /* 0x14E8-0x14EF */
            0x0550, 0x0580, 0x0551, 0x0581, 0x0552, 0x0582, 0x0553, 0x0583, /* 0x14F0-0x14F7 */
            0x0554, 0x0584, 0x0555, 0x0585, 0x0556, 0x0586, 0x2019, 0x0027, /* 0x14F8-0x14FF */
        };
        return keysym_to_unicode_14A1_14FF[keysym - 0x14A1];
    }
    else if (keysym > 0x15CF && keysym < 0x15F7) {
        uint16_t keysym_to_unicode_15D0_15F6[] = {
            0x10D0, 0x10D1, 0x10D2, 0x10D3, 0x10D4, 0x10D5, 0x10D6, 0x10D7, /* 0x15D0-0x15D7 */
            0x10D8, 0x10D9, 0x10DA, 0x10DB, 0x10DC, 0x10DD, 0x10DE, 0x10DF, /* 0x15D8-0x15DF */
            0x10E0, 0x10E1, 0x10E2, 0x10E3, 0x10E4, 0x10E5, 0x10E6, 0x10E7, /* 0x15E0-0x15E7 */
            0x10E8, 0x10E9, 0x10EA, 0x10EB, 0x10EC, 0x10ED, 0x10EE, 0x10EF, /* 0x15E8-0x15EF */
            0x10F0, 0x10F1, 0x10F2, 0x10F3, 0x10F4, 0x10F5, 0x10F6          /* 0x15F0-0x15F7 */
        };
        return keysym_to_unicode_15D0_15F6[keysym - 0x15D0];
    }
    else if (keysym > 0x169F && keysym < 0x16F7) {
        uint16_t keysym_to_unicode_16A0_16F6[] = {
            0x0000, 0x0000, 0xF0A2, 0x1E8A, 0x0000, 0xF0A5, 0x012C, 0xF0A7, /* 0x16A0-0x16A7 */
            0xF0A8, 0x01B5, 0x01E6, 0x0000, 0x0000, 0x0000, 0x0000, 0x019F, /* 0x16A8-0x16AF */
            0x0000, 0x0000, 0xF0B2, 0x1E8B, 0x01D1, 0xF0B5, 0x012D, 0xF0B7, /* 0x16B0-0x16B7 */
            0xF0B8, 0x01B6, 0x01E7, 0x0000, 0x0000, 0x01D2, 0x0000, 0x0275, /* 0x16B8-0x16BF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x018F, 0x0000, /* 0x16C0-0x16C7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x16C8-0x16CF */
            0x0000, 0x1E36, 0xF0D2, 0xF0D3, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x16D0-0x16D7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x16D8-0x16DF */
            0x0000, 0x1E37, 0xF0E2, 0xF0E3, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x16E0-0x16E7 */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, /* 0x16E8-0x16EF */
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0259          /* 0x16F0-0x16F6 */
        };
        return keysym_to_unicode_16A0_16F6[keysym - 0x16A0];
    }
    else if (keysym > 0x1E9E && keysym < 0x1F00) {
        uint16_t keysym_to_unicode_1E9F_1EFF[] = {
                                                                    0x0303,
            0x1EA0, 0x1EA1, 0x1EA2, 0x1EA3, 0x1EA4, 0x1EA5, 0x1EA6, 0x1EA7, /* 0x1EA0-0x1EA7 */
            0x1EA8, 0x1EA9, 0x1EAA, 0x1EAB, 0x1EAC, 0x1EAD, 0x1EAE, 0x1EAF, /* 0x1EA8-0x1EAF */
            0x1EB0, 0x1EB1, 0x1EB2, 0x1EB3, 0x1EB4, 0x1EB5, 0x1EB6, 0x1EB7, /* 0x1EB0-0x1EB7 */
            0x1EB8, 0x1EB9, 0x1EBA, 0x1EBB, 0x1EBC, 0x1EBD, 0x1EBE, 0x1EBF, /* 0x1EB8-0x1EBF */
            0x1EC0, 0x1EC1, 0x1EC2, 0x1EC3, 0x1EC4, 0x1EC5, 0x1EC6, 0x1EC7, /* 0x1EC0-0x1EC7 */
            0x1EC8, 0x1EC9, 0x1ECA, 0x1ECB, 0x1ECC, 0x1ECD, 0x1ECE, 0x1ECF, /* 0x1EC8-0x1ECF */
            0x1ED0, 0x1ED1, 0x1ED2, 0x1ED3, 0x1ED4, 0x1ED5, 0x1ED6, 0x1ED7, /* 0x1ED0-0x1ED7 */
            0x1ED8, 0x1ED9, 0x1EDA, 0x1EDB, 0x1EDC, 0x1EDD, 0x1EDE, 0x1EDF, /* 0x1ED8-0x1EDF */
            0x1EE0, 0x1EE1, 0x1EE2, 0x1EE3, 0x1EE4, 0x1EE5, 0x1EE6, 0x1EE7, /* 0x1EE0-0x1EE7 */
            0x1EE8, 0x1EE9, 0x1EEA, 0x1EEB, 0x1EEC, 0x1EED, 0x1EEE, 0x1EEF, /* 0x1EE8-0x1EEF */
            0x1EF0, 0x1EF1, 0x0300, 0x0301, 0x1EF4, 0x1EF5, 0x1EF6, 0x1EF7, /* 0x1EF0-0x1EF7 */
            0x1EF8, 0x1EF9, 0x01A0, 0x01A1, 0x01AF, 0x01B0, 0x0309, 0x0323  /* 0x1EF8-0x1EFF */
        };
        return keysym_to_unicode_1E9F_1EFF[keysym - 0x1E9F];
    }
    else if (keysym > 0x209F && keysym < 0x20AD) {
        uint16_t keysym_to_unicode_20A0_20AC[] = {
            0x20A0, 0x20A1, 0x20A2, 0x20A3, 0x20A4, 0x20A5, 0x20A6, 0x20A7, /* 0x20A0-0x20A7 */
            0x20A8, 0x20A9, 0x20AA, 0x20AB, 0x20AC                          /* 0x20A8-0x20AF */
        };
        return keysym_to_unicode_20A0_20AC[keysym - 0x20A0];
    }
    ElsE return 0;
}




PointErEvEnt = 0x05 // 5 BytEs

  uint8_t     uint16_t  uint16_t
Button_mAsk     x         y

LEFtButtonMAsk = 0x01
MiDDlEButtonMAsk = 0x02
RightButtonMAsk = 0x04
SCrollUpButtonMAsk = 0x08
SCrollDownButtonMAsk = 0x10

prEssED Buttons
Button_mAsk & LEFtButtonMAsk
Button_mAsk & MiDDlEButtonMAsk
Button_mAsk & RightButtonMAsk
Button_mAsk & SCrollUpButtonMAsk
Button_mAsk & SCrollDownButtonMAsk




CliEntCutTExt = 0x06 //



